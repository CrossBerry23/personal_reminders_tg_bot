import asyncio
import datetime
import logging
from database_manager import DatabaseManager

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class Scheduler:
    def __init__(self, bot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self.notified_tasks_30min = set()  
        self.notified_missed_tasks = set()  
        self.has_active_tasks = False
        self.midnight_notified = False

    async def start(self):
        """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        while True:
            await self.check_tasks()
            sleep_time = 60 if self.has_active_tasks else 600  
            await asyncio.sleep(sleep_time)

    async def check_tasks(self):
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        now = datetime.datetime.now()
        today_str = now.strftime("%Y-%m-%d")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –Ω–∞ {now.strftime('%Y-%m-%d %H:%M:%S')}")
        tasks = await self.db_manager.get_tasks_for_today()
        outdated_tasks = await self.db_manager.get_all_tasks_with_prefix("‚ùå")
        self.has_active_tasks = len(tasks) > 0  
        users_with_tasks = set()

        for task in tasks:
            task_time = datetime.datetime.strptime(f"{task.date} {task.time}", "%Y-%m-%d %H:%M")
            time_diff = (task_time - now).total_seconds()

            if time_diff < 0 and not task.name.startswith("‚ùå"):  
                task.name = f"‚ùå {task.name}"
                await self.db_manager.update_task_field(task.task_id, "name", task.name)

            if task.date == today_str or time_diff < 0:
                users_with_tasks.add(task.user_id)

            if 0 < time_diff < 60:
                await self.bot.send_message(chat_id=task.user_id, text=f"‚è∞ –ó–∞–¥–∞—á–∞ '{task.name}', –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –Ω–∞ {task.date} {task.time}, —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            
            elif 1800 >= time_diff > 1740:
                await self.bot.send_message(chat_id=task.user_id, text=f"‚è≥ –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É '{task.name}' –≤ {task.time}.")

        for task in outdated_tasks:
            task_time = datetime.datetime.strptime(f"{task.date} {task.time}", "%Y-%m-%d %H:%M")
            time_diff = (task_time - now).total_seconds()

            if time_diff >= 0:
                new_name = task.name[2:]
                await self.db_manager.update_task_field(task.task_id, "name", new_name)
                logger.info(f"‚úÖ –£–±—Ä–∞–ª–∏ ‚ùå —É –∑–∞–¥–∞—á–∏: {new_name} (–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –¥–∞—Ç–∞)")

        if now.hour == 0 and now.minute in {0, 1} and not self.midnight_notified:
            await self.send_midnight_notifications(users_with_tasks)
            self.midnight_notified = True

        if now.hour == 1:
            self.midnight_notified = False

    async def send_midnight_notifications(self, users_with_tasks):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00: –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        all_users = await self.db_manager.get_all_users()
        all_tasks = await self.db_manager.get_tasks_for_today()

        user_today_tasks = {}
        user_missed_tasks = {}

        now = datetime.datetime.now()
        today_str = now.strftime("%Y-%m-%d")

        for task in all_tasks:
            task_time = datetime.datetime.strptime(f"{task.date} {task.time}", "%Y-%m-%d %H:%M")
            time_diff = (task_time - now).total_seconds()

            if time_diff < 0:
                user_missed_tasks.setdefault(task.user_id, []).append(f"‚ö†Ô∏è {task.name} ({task.date} {task.time})")
            elif task.date == today_str:
                user_today_tasks.setdefault(task.user_id, []).append(f"‚úÖ {task.name} –≤ {task.time}")

        for user_id in all_users:
            message_parts = []

            if user_id in user_today_tasks:
                message_parts.append("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(user_today_tasks[user_id]))

            if user_id in user_missed_tasks:
                message_parts.append("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(user_missed_tasks[user_id]))

            if not message_parts:
                message_parts.append("‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message_parts}")
            await self.bot.send_message(user_id, "\n\n".join(message_parts))

    async def handle_recurrence(self, task):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π"""
        if task.recurrence == "once":
            return  

        current_date = datetime.datetime.strptime(task.date, "%Y-%m-%d")
        if task.recurrence == "daily":
            next_date = current_date + datetime.timedelta(days=1)
        elif task.recurrence == "weekly":
            next_date = current_date + datetime.timedelta(weeks=1)
        elif task.recurrence == "monthly":
            next_date = current_date.replace(month=current_date.month + 1) if current_date.month < 12 else current_date.replace(year=current_date.year + 1, month=1)
        elif task.recurrence == "yearly":
            next_date = current_date.replace(year=current_date.year + 1)
        else:
            return  

        next_date_str = next_date.strftime("%Y-%m-%d")
        existing_tasks = await self.db_manager.get_tasks_for_today()
        clean_task_name = task.name.lstrip("‚ùå ").strip()
        similar_tasks = [
            existing_task for existing_task in existing_tasks
            if existing_task.user_id == task.user_id and  
            existing_task.name.lstrip("‚ùå ").strip() == clean_task_name and
            existing_task.time == task.time and  
            existing_task.recurrence == task.recurrence
        ]

        if len(similar_tasks) >= 2:
            return  

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏ '{clean_task_name}' -> {next_date_str}")
        await self.db_manager.add_task(task.user_id, clean_task_name, next_date_str, task.time, task.recurrence)
