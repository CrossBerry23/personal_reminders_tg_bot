from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
import re
from database_manager import DatabaseManager
from task_manager import TaskManager

class BotHandler:
    def __init__(self):
        self.db_manager = DatabaseManager()

    async def main_menu(self, update: Update, context: CallbackContext) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="list_today")],
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á", callback_data="list")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ‚öôÔ∏è", reply_markup=reply_markup)
            await update.callback_query.answer()
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ‚öôÔ∏è", reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.message.chat_id
        task_manager = TaskManager(user_id, self.db_manager)
        
        await query.answer()

        if query.data == 'list_today':
            tasks = task_manager.get_today_tasks()
            await self.show_tasks(update, tasks)

        elif query.data == 'list':
            tasks = task_manager.get_all_tasks()
            await self.show_tasks(update, tasks)

        elif query.data == 'add':
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
            context.user_data['adding_task'] = True

        elif query.data == 'main_menu':
            await self.main_menu(update, context)

    async def show_tasks(self, update: Update, tasks):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ inline-–∫–Ω–æ–ø–æ–∫"""
        if not tasks:
            await update.callback_query.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            await self.main_menu(update, None)
            return

        keyboard = [[InlineKeyboardButton(f"{task.name} ({task.date} {task.time})", callback_data=f"task_{task.task_id}")] for task in tasks]
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)

    async def handle_text_input(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –≤—Ä–µ–º—è, –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å)"""
        text = update.message.text.strip()

        if context.user_data.get('waiting_for_time'):
            if re.fullmatch(r"([01]?\d|2[0-3]):([0-5]\d)", text):
                context.user_data["task_time"] = text
                context.user_data["waiting_for_time"] = False

                keyboard = [
                    [InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="once")],
                    [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="daily")],
                    [InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="weekly")],
                    [InlineKeyboardButton("–†–∞–∑ –≤ –º–µ—Å—è—Ü", callback_data="monthly")],
                    [InlineKeyboardButton("–†–∞–∑ –≤ –≥–æ–¥", callback_data="yearly")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45):")
            return

        if context.user_data.get("editing_task"):
            task = context.user_data.get("selected_task")
            edit_type = context.user_data.get("edit_type")

            if not task:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                await self.main_menu(update, context)
                return

            if edit_type == "name":
                task.name = text
            elif edit_type == "time":
                if re.fullmatch(r"([01]?\d|2[0-3]):([0-5]\d)", text):
                    task.time = text
                else:
                    await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45).")
                    return
            else:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")
                return
            
            self.db_manager.update_task(task)
            context.user_data["selected_task"] = task
            edit_labels = {"name": "–ò–º—è", "time": "–í—Ä–µ–º—è"}
            edit_label = edit_labels.get(edit_type, edit_type.capitalize())
            await update.message.reply_text(f"‚úÖ {edit_label} –∏–∑–º–µ–Ω–µ–Ω–æ.")

            context.user_data.pop("editing_task")
            context.user_data.pop("edit_type")
            await self.main_menu(update, context)
            return

        if context.user_data.get('adding_task'):
            context.user_data['task_name'] = text
            context.user_data['adding_task'] = False
            await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            await self.ask_for_date(update, context)

    async def ask_for_date(self, update: Update, context: CallbackContext) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query 
        message = query.message if query else update.message

        if query:
            await query.answer()
            await query.message.delete()

        if message is None:
            return  # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫

        calendar, step = DetailedTelegramCalendar(calendar_id="calendar").build()
        await message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}", reply_markup=calendar)

    async def handle_recurrence_change(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        recurrence_mapping = {
            "recurrence_once": "once",
            "recurrence_daily": "daily",
            "recurrence_weekly": "weekly",
            "recurrence_monthly": "monthly",
            "recurrence_yearly": "yearly",
        }

        new_recurrence = recurrence_mapping.get(query.data)
        task = context.user_data.get("selected_task")

        if task and new_recurrence:
            task.recurrence = new_recurrence
            self.db_manager.update_task(task)
            context.user_data["selected_task"] = task
            await query.message.reply_text(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{self.recurrence_name(new_recurrence)}'.")
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await self.main_menu(update, context)


    async def calendar_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        query = update.callback_query
        result, key, step = DetailedTelegramCalendar(calendar_id="calendar").process(query.data)

        if not result and key:
            await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}", reply_markup=key)
            return

        if result:
            if context.user_data.get("editing_date"):
                task = context.user_data.get("selected_task")
                if task:
                    task.date = result
                    self.db_manager.update_task(task)
                    context.user_data["selected_task"] = task
                    context.user_data.pop("editing_date")
                    await query.message.reply_text(f"üìÖ –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {result}.")
                else:
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                await self.main_menu(update, context)
            else:
                context.user_data["task_date"] = result
                context.user_data["waiting_for_time"] = True
                await query.message.edit_text(f"üìÖ –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {result}\n‚å® –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:37):")
        await query.answer()

    async def period_choice_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        recurrence = query.data if query.data != "custom" else None
        context.user_data["task_recurrence"] = recurrence

        if recurrence == "custom":
            await query.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä: `1y 2m 1w 3d`):")
            context.user_data["waiting_for_custom_recurrence"] = True
        else:
            await self.save_task(update, context)

    async def save_task(self, update: Update, context: CallbackContext) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_chat.id
        user_data = context.user_data
        task_name = user_data.get("task_name")
        task_date = user_data.get("task_date")
        task_time = user_data.get("task_time")
        task_recurrence = user_data.get("task_recurrence")

        if not all([task_name, task_date, task_time, task_recurrence]):
            error_message = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."
            if update.callback_query:
                await update.callback_query.message.edit_text(error_message)
            else:
                await update.message.reply_text(error_message)
            return

        self.db_manager.add_task(user_id, task_name, task_date, task_time, task_recurrence)
        confirmation_text = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"

        if update.callback_query:
            await update.callback_query.message.reply_text(confirmation_text)
        else:
            await update.message.reply_text(confirmation_text)

        user_data.clear()
        await self.main_menu(update, context)

    @staticmethod
    def recurrence_name(recurrence: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        recurrence_mapping = {
            "once": "–ï–¥–∏–Ω–æ–∂–¥—ã",
            "daily": "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "weekly": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
            "monthly": "–†–∞–∑ –≤ –º–µ—Å—è—Ü",
            "yearly": "–†–∞–∑ –≤ –≥–æ–¥"
        }
        return recurrence_mapping.get(recurrence, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

    async def handle_task_selection(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é task_edit"""
        query = update.callback_query
        task_id = query.data.replace("task_", "")
        user_id = query.message.chat_id
        task_manager = TaskManager(user_id, self.db_manager)
        task = task_manager.get_task_by_id(task_id)
        if not task:
            await query.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await self.main_menu(update, context)
            return

        context.user_data["selected_task"] = task
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="complete_task")],
            [InlineKeyboardButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_task")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìå –ó–∞–¥–∞—á–∞: *{task.name}*\nüìÖ –î–∞—Ç–∞: {task.date}\n‚è∞ –í—Ä–µ–º—è: {task.time}\nüîÅ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self.recurrence_name(task.recurrence)}",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    async def task_edit_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é task_edit"""
        query = update.callback_query
        task = context.user_data.get("selected_task")

        if not task:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            await self.main_menu(update, context)
            return

        if query.data == "complete_task":
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_complete")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")],
            ]
            await query.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "edit_task":
            keyboard = [
                [InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date")],
                [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_time")],
                [InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data="edit_recurrence")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
            ]
            await query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "edit_date":
            context.user_data["editing_date"] = True
            await self.ask_for_date(update, context)
        elif query.data == "back_to_menu":
            await self.main_menu(update, context)
        await query.answer()

    async def confirm_task_completion(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        task = context.user_data.get("selected_task")
        user_id = query.message.chat_id
        task_manager = TaskManager(user_id, self.db_manager)

        if task:
            if query.data == "confirm_complete":
                task_manager.delete_task(task.task_id)
                await query.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                await self.main_menu(update, context)
            elif query.data == "cancel":
                await self.main_menu(update, context)
        else:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.answer()

    async def edit_task(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        task = context.user_data.get("selected_task")

        if not task:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        if query.data == "edit_name":
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            context.user_data["editing_task"] = True
            context.user_data["edit_type"] = "name"
        elif query.data == "edit_date":
            context.user_data["editing_date"] = True
            await self.ask_for_date(update, context)
        elif query.data == "edit_time":
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            context.user_data["editing_task"] = True
            context.user_data["edit_type"] = "time"
        elif query.data == "edit_recurrence":
            await self.ask_for_recurrence(update, context)

    async def ask_for_recurrence(self, update: Update, context: CallbackContext) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        keyboard = [
            [InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="recurrence_once")],
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="recurrence_daily")],
            [InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="recurrence_weekly")],
            [InlineKeyboardButton("–†–∞–∑ –≤ –º–µ—Å—è—Ü", callback_data="recurrence_monthly")],
            [InlineKeyboardButton("–†–∞–∑ –≤ –≥–æ–¥", callback_data="recurrence_yearly")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)


    async def handle_edit_text(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        task = context.user_data.get("selected_task")
        if not task:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return

        text = update.message.text.strip()
        edit_type = context.user_data.get("edit_type")

        if edit_type == "name":
            task.name = text
        elif edit_type == "time":
            if not re.fullmatch(r"([01]?\d|2[0-3]):([0-5]\d)", text):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45):")
                return
            task.time = text
        elif edit_type == "recurrence":
            task.recurrence = text
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        self.db_manager.update_task(task)
        context.user_data["selected_task"] = task
        await update.message.reply_text(f"‚úÖ {edit_type.capitalize()} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{text}'.")

        context.user_data.pop("editing_task", None)
        context.user_data.pop("edit_type", None)

    async def back_to_task_edit(self, update: Update, context: CallbackContext) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é task_edit"""
        task = context.user_data.get("selected_task")
        if task:
            await self.handle_task_selection(update, context)